1、mybatis动态sql,可以在XML映射文件内,以XM标签的形式编写动态SQL,完成逻辑判断和动态拼接SQL的功能。
   有<if>、<choose>、<when>、<otherwise>、<trim>、<where>、<set>、<foreach>、<script>、<bind>。
   其执行原理为,使用OGNL的表达式,从SQL参数对象中计算表达式的值,根据表达式的值动态拼接SQL,以此来完成动态SQL的功能.
   
2、Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，
  collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。
  它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，
  拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，
  于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。
  
3、SimpleExecutor、ReuseExecutor、BatchExecutor。
   SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
   ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，
        不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
   BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），
      等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，
      等待逐一执行executeBatch()批处理。与JDBC批处理相同。
	  
4、Mybatis一级缓存是基于SqlSession级别的,在操作数据库时需要构造sqlSession对象，在对象中有一个数据结构（HashMap）
     用于存储缓存数据。不同的sqlSession之间的缓存数据区域是互相不影响的。
   Mybatis二级缓存是基于mapper级别的，多个sqlSession去操作同一个Mapper的sql语句，多个sqlSession可以共用二级缓存，
   二级缓存是跨sqlSession的，二级缓存是通过cache存放的；
 
5、Mybatis的插件运行原理是基于拦截器来实现的，在Executor，StatementHandler，ParameterHandler，ResultSetHandler
   中提供了插件拓展机制，每个创建出来的对象不是直接返回的，而是interceptorChain.pluginAll(parameterHandler); 
   获取到所有的拦截器，调用interceptor.plugin(target）返回target包装后的对象；
   我们可以使用插件为四大对象创建一个代理对象，代理对象就可以拦截并执行。实现插件接口Interceptor,在配置文件配置插件
   即可使用
